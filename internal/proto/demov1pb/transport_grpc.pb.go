// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demov1pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransportClient is the client API for Transport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransportClient interface {
	Bidi(ctx context.Context, opts ...grpc.CallOption) (Transport_BidiClient, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Transport_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (Transport_ServerStreamClient, error)
	Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type transportClient struct {
	cc grpc.ClientConnInterface
}

func NewTransportClient(cc grpc.ClientConnInterface) TransportClient {
	return &transportClient{cc}
}

func (c *transportClient) Bidi(ctx context.Context, opts ...grpc.CallOption) (Transport_BidiClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transport_ServiceDesc.Streams[0], "/demo.v1.Transport/Bidi", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportBidiClient{stream}
	return x, nil
}

type Transport_BidiClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type transportBidiClient struct {
	grpc.ClientStream
}

func (x *transportBidiClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportBidiClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Transport_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transport_ServiceDesc.Streams[1], "/demo.v1.Transport/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportClientStreamClient{stream}
	return x, nil
}

type Transport_ClientStreamClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type transportClientStreamClient struct {
	grpc.ClientStream
}

func (x *transportClientStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *transportClientStreamClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportClient) ServerStream(ctx context.Context, in *Message, opts ...grpc.CallOption) (Transport_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Transport_ServiceDesc.Streams[2], "/demo.v1.Transport/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &transportServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Transport_ServerStreamClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type transportServerStreamClient struct {
	grpc.ClientStream
}

func (x *transportServerStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transportClient) Unary(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/demo.v1.Transport/Unary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransportServer is the server API for Transport service.
// All implementations should embed UnimplementedTransportServer
// for forward compatibility
type TransportServer interface {
	Bidi(Transport_BidiServer) error
	ClientStream(Transport_ClientStreamServer) error
	ServerStream(*Message, Transport_ServerStreamServer) error
	Unary(context.Context, *Message) (*Message, error)
}

// UnimplementedTransportServer should be embedded to have forward compatible implementations.
type UnimplementedTransportServer struct {
}

func (UnimplementedTransportServer) Bidi(Transport_BidiServer) error {
	return status.Errorf(codes.Unimplemented, "method Bidi not implemented")
}
func (UnimplementedTransportServer) ClientStream(Transport_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedTransportServer) ServerStream(*Message, Transport_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedTransportServer) Unary(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}

// UnsafeTransportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransportServer will
// result in compilation errors.
type UnsafeTransportServer interface {
	mustEmbedUnimplementedTransportServer()
}

func RegisterTransportServer(s grpc.ServiceRegistrar, srv TransportServer) {
	s.RegisterService(&Transport_ServiceDesc, srv)
}

func _Transport_Bidi_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServer).Bidi(&transportBidiServer{stream})
}

type Transport_BidiServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type transportBidiServer struct {
	grpc.ServerStream
}

func (x *transportBidiServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportBidiServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transport_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TransportServer).ClientStream(&transportClientStreamServer{stream})
}

type Transport_ClientStreamServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type transportClientStreamServer struct {
	grpc.ServerStream
}

func (x *transportClientStreamServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *transportClientStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Transport_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Message)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransportServer).ServerStream(m, &transportServerStreamServer{stream})
}

type Transport_ServerStreamServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type transportServerStreamServer struct {
	grpc.ServerStream
}

func (x *transportServerStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _Transport_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransportServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.v1.Transport/Unary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransportServer).Unary(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// Transport_ServiceDesc is the grpc.ServiceDesc for Transport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.v1.Transport",
	HandlerType: (*TransportServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _Transport_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Bidi",
			Handler:       _Transport_Bidi_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _Transport_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _Transport_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/demo/transport.proto",
}
